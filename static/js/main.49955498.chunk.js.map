{"version":3,"sources":["constants/colors.js","components/header/index.js","icons/play.svg","components/loader/index.js","icons/stop.svg","icons/pause.svg","components/display/index.js","pool.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PRIMARY","PRIMARY_LIGHT","PRIMARY_TEXT","SECONDARY_TEXT","className","style","backgroundColor","color","sceneName","gamma","resolution","reflections","onParamChange","onStart","loading","Fragment","textAlign","href","target","value","onChange","e","disabled","onClick","src","PlayIcon","DisplayComponent","props","computePixel","index","Promise","resolve","Float64Array","i","Math","floor","width","j","renderer","render_pixel","scene","camera","mainLoop","iteration","pause","maxIteration","workerPool","tasks","size","height","start","stop","min","chunkSize","t0","Date","thisStart","thisStop","push","call","then","colors","updateImage","updateCanvas","image","all","t1","console","log","requestAnimationFrame","onPause","setState","state","this","canvas","document","createElement","context","getContext","imageData","createImageData","imageElement","toDataURL","seed","random","broadcast","frac","max","data","gammaInv","pow","putImageData","onStop","ref","marginRight","PauseIcon","StopIcon","Component","WorkerPool","workers","_workers","_status","_tasks","forEach","_","methodName","args","reject","popTask","results","workerId","executeTask","availableWorker","length","Object","entries","parseInt","undefined","task","slice","remoteHandle","result","catch","err","App","loaded","key","handshakes","worker","Worker","process","messenger","WorkerMessenger","ParentHandshake","connections","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49955498.chunk.js","sourcesContent":["export const BACKGROUND = \"#F5F5F5\";\n\nexport const PRIMARY = \"#3f51b5\";\nexport const PRIMARY_LIGHT = \"#757de8\";\nexport const PRIMARY_DARK = \"#002984\";\nexport const PRIMARY_TEXT = \"#ffffff\";\n\nexport const SECONDARY = \"#9c27b0\";\nexport const SECONDARY_LIGHT = \"#d05ce3\";\nexport const SECONDARY_DARK = \"#6a0080\";\nexport const SECONDARY_TEXT = \"#ffffff\";\n","import React from 'react';\n\nimport { PRIMARY, PRIMARY_TEXT } from '../../constants/colors';\n\nexport default () => {\n  return (\n    <div className=\"header\" style={{backgroundColor: PRIMARY, color: PRIMARY_TEXT}}>\n      Ray Tracer\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/play.f8ecb826.svg\";","import React from 'react';\n\nimport { BACKGROUND, PRIMARY, PRIMARY_LIGHT, PRIMARY_TEXT } from '../../constants/colors';\n\nimport PlayIcon from '../../icons/play.svg';\n\nexport default ({ sceneName, gamma, resolution, reflections, onParamChange, onStart, loading }) => {\n  return (\n    <React.Fragment>\n      <div className=\"content\" style={{ textAlign: 'center' }}>\n        <h2>\n          Rust + WebAssembly Path Tracer\n        </h2>\n\n        <h3>\n          Author\n        </h3>\n        <span>\n          Alessandro Genova\n        </span>\n\n        <h3>\n          Core Library\n        </h3>\n        <span>\n          <a href=\"https://github.com/alesgenova/ray-tracer\" target=\"_blank\">Source</a>\n          <br />\n          (rust)\n        </span>\n\n        <h3>\n          Demo App\n        </h3>\n        <span>\n          <a href=\"https://github.com/alesgenova/ray-tracer-app\" target=\"_blank\">Source</a>\n          <br />\n          (wasm, react)\n        </span>\n\n        <br />\n\n        <h3>\n          Scene\n        </h3>\n        <select value={sceneName} onChange={(e) => { onParamChange('sceneName', e.target.value) }}>\n          <option value=\"random\">Random</option>\n          <option value=\"room\">Room</option>\n        </select>\n\n        <h3>\n          Resolution\n        </h3>\n        <select value={resolution} onChange={(e) => { onParamChange('resolution', e.target.value) }}>\n          <option value={10}>{`${10 * 16} x ${10 * 9}`}</option>\n          <option value={20}>{`${20 * 16} x ${20 * 9}`}</option>\n          <option value={40}>{`${40 * 16} x ${40 * 9}`}</option>\n          <option value={80}>{`${80 * 16} x ${80 * 9}`}</option>\n        </select>\n\n        <h3>\n          Reflections\n        </h3>\n        <select value={reflections} onChange={(e) => { onParamChange('reflections', e.target.value) }}>\n          <option value={2}>2</option>\n          <option value={4}>4</option>\n          <option value={8}>8</option>\n          <option value={16}>16</option>\n        </select>\n\n        <h3>\n          Gamma\n        </h3>\n        <select value={gamma} onChange={(e) => { onParamChange('gamma', e.target.value) }}>\n          <option value={1.0}>1.0</option>\n          <option value={1.5}>1.5</option>\n          <option value={2.0}>2.0</option>\n          <option value={2.5}>2.5</option>\n          <option value={3.0}>3.0</option>\n        </select>\n      </div>\n      <div className=\"floating-container-center\">\n        <button\n          disabled={loading}\n          onClick={onStart}\n          className=\"floating-button-large\"\n          style={{ backgroundColor: loading ? PRIMARY_LIGHT : PRIMARY, color: PRIMARY_TEXT }}\n        >\n          <img src={PlayIcon} />\n        </button>\n      </div>\n    </React.Fragment>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/stop.2f57eafa.svg\";","export default __webpack_public_path__ + \"static/media/pause.917fd899.svg\";","import React, { Component } from 'react';\n\nimport { BACKGROUND, SECONDARY, SECONDARY_LIGHT, SECONDARY_TEXT, PRIMARY_LIGHT } from '../../constants/colors';\n\nimport StopIcon from '../../icons/stop.svg';\nimport PauseIcon from '../../icons/pause.svg';\nimport PlayIcon from '../../icons/play.svg';\n\nclass DisplayComponent extends Component {\n\n  canvas;\n  context;\n  imageData;\n  scene;\n  camera;\n  renderer;\n  previewRenderer;\n  width;\n  height;\n  imageElement;\n  pause;\n\n  iteration;\n  currentIndex;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pause: false\n    }\n  }\n\n  componentDidMount() {\n\n    const {\n      width, height,\n      sceneName,\n      reflections,\n      workerPool\n    } = this.props;\n\n    this.pause = false;\n\n    this.width = width;\n    this.height = height;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.context = this.canvas.getContext('2d');\n    this.imageData = this.context.createImageData(this.width, this.height);\n    this.imageElement.src = this.canvas.toDataURL();\n\n    this.image = new Float64Array(this.width * this.height * 3);\n\n    this.chunkSize = 2000;\n\n    this.maxIteration = 256;\n\n    const seed = Math.floor(Math.random() * 2147483646);\n    Promise.all(\n      workerPool.broadcast('initialize', sceneName, width, height, reflections, seed)\n    ).then(() => {\n      this.mainLoop(-1);\n    });\n  }\n\n  componentDidUpdate() {\n    this.context = this.canvas.getContext('2d');\n    this.imageData = this.context.createImageData(this.width, this.height);\n  }\n\n  componentWillUnmount() {\n    this.pause = true;\n  }\n\n  computePixel = (index) => {\n    return new Promise((resolve) => {\n      let color = new Float64Array(3);\n      let i = Math.floor(index / this.width);\n      let j = index % this.width;\n      this.renderer.render_pixel(j, i, this.scene, this.camera, color);\n      resolve({ i, j, color });\n    });\n  }\n\n  mainLoop = (iteration) => {\n    this.iteration = iteration;\n\n    if (this.pause || iteration > this.maxIteration) {\n      return;\n    }\n\n    const { workerPool } = this.props;\n\n    const tasks = [];\n    const size = this.width * this.height;\n    let start = 0;\n    let stop = Math.min(size, start + this.chunkSize);\n    const t0 = new Date();\n    while (start < size) {\n      const thisStart = start;\n      const thisStop = stop;\n      tasks.push(\n        workerPool.call('renderChunk', thisStart, thisStop, iteration).then((colors) => {\n          this.updateImage(thisStart, thisStop, iteration, colors);\n          this.updateCanvas(this.image);\n        })\n      );\n      start = stop;\n      stop = Math.min(size, start + this.chunkSize);\n    }\n\n    Promise.all(tasks).then(() => {\n      const t1 = new Date();\n      console.log(\"All tasks done!\", iteration, \"Elapsed: \", (t1 - t0) / 1000);\n      requestAnimationFrame(() => {\n        this.mainLoop(iteration + 1);\n      });\n    });\n  }\n\n  updateImage(start, stop, iteration, colors) {\n    iteration = Math.max(0, iteration);\n    let frac = 1 / (iteration + 1);\n    for (let j = 0; j < stop - start; ++j) {\n      const index = j + start;\n      for (let i = 0; i < 3; ++i) {\n        this.image[index * 3 + i] = (1 - frac) * this.image[index * 3 + i] + frac * colors[j * 3 + i];\n      }\n    }\n  }\n\n  updateCanvas(data) {\n    const { gamma } = this.props;\n    let gammaInv = 1 / gamma;\n    for (let i = 0; i < this.width * this.height; ++i) {\n      this.imageData.data[i * 4] = Math.pow(data[i * 3], gammaInv) * 255;\n      this.imageData.data[i * 4 + 1] = Math.pow(data[i * 3 + 1], gammaInv) * 255;\n      this.imageData.data[i * 4 + 2] = Math.pow(data[i * 3 + 2], gammaInv) * 255;\n      this.imageData.data[i * 4 + 3] = 255;\n    }\n    this.context.putImageData(this.imageData, 0, 0);\n    if (this.imageElement) {\n      this.imageElement.src = this.canvas.toDataURL();\n    }\n  }\n\n  onPause = () => {\n    const pause = this.pause;\n\n    this.pause = !pause;\n    if (pause) {\n      this.mainLoop(this.iteration);\n    }\n\n    this.setState(state => {\n      state.pause = !pause;\n      return state;\n    });\n  }\n\n  render() {\n    const { onStop } = this.props;\n    const { pause } = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"content\" style={{ textAlign: 'center' }}>\n          <img style={{ width: '100%' }} ref={ref => { this.imageElement = ref; }} />\n        </div>\n        <div className=\"floating-container-center\">\n          <button\n            onClick={this.onPause}\n            className=\"floating-button-large\"\n            style={{ backgroundColor: PRIMARY_LIGHT, color: SECONDARY_TEXT, marginRight: '1rem' }}\n          >\n            <img src={pause ? PlayIcon : PauseIcon} />\n          </button>\n          <button\n            onClick={onStop}\n            className=\"floating-button-large\"\n            style={{ backgroundColor: SECONDARY, color: SECONDARY_TEXT }}\n          >\n            <img src={StopIcon} />\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DisplayComponent;\n","import { Connection } from 'post-me';\n\ntype Task = {\n  methodName: string;\n  args: any[];\n  resolve: (value: any) => void;\n  reject: (error: any) => void\n}\n\nexport class WorkerPool {\n  _workers: Connection[];\n  _status: { [x: number]: number };\n  _tasks: Task[];\n\n  constructor(workers: Connection[]) {\n    this._workers = workers;\n    this._tasks = [];\n    this._status = {};\n    this._workers.forEach((_, i) => {\n      this._status[i] = 0;\n    });\n  }\n\n  call(methodName: string, ...args: any[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._tasks.push({\n        methodName, args,\n        resolve, reject\n      });\n\n      this.popTask();\n    })\n  }\n\n  broadcast(methodName: string, ...args: any[]): Promise<any>[] {\n    const results: Promise<any>[] = [];\n    this._workers.forEach((_, workerId) => {\n      results.push(\n        new Promise((resolve, reject) => {\n          this.executeTask(workerId, { methodName, args, resolve, reject });\n        })\n      )\n    })\n\n    return results;\n  }\n\n  private popTask() {\n    if (this._tasks.length === 0) {\n      return;\n    }\n\n    let availableWorker: number | undefined;\n    Object.entries(this._status).forEach(([workerId, status]) => {\n      if (status === 0) {\n        availableWorker = parseInt(workerId);\n      }\n    });\n\n    if (availableWorker !== undefined) {\n      const task = this._tasks[0];\n      this._tasks = this._tasks.slice(1, this._tasks.length);\n      this.executeTask(availableWorker, task);\n    }\n  }\n\n  private executeTask(workerId: number, task: Task) {\n    this._status[workerId] += 1;\n    const { methodName, args, resolve, reject } = task;\n    const connection = this._workers[workerId];\n    connection.remoteHandle().call(methodName, ...args)\n      .then(result => {\n        resolve(result);\n        this._status[workerId] -= 1;\n        this.popTask();\n      })\n      .catch(err => {\n        reject(err);\n        this._status[workerId] -= 1;\n        this.popTask();\n      });\n  }\n}","import React from 'react';\nimport { WorkerMessenger, ParentHandshake, DebugMessenger, Connection, debug } from \"post-me\";\n\nimport HeaderComponent from './components/header';\nimport LoaderComponent from './components/loader';\nimport DisplayComponent from './components/display';\nimport { BACKGROUND } from './constants/colors';\n\nimport { WorkerPool } from './pool';\n\ninterface Props { };\nexport interface State {\n  loading: boolean;\n  loaded: boolean;\n  sceneName: string;\n  resolution: number;\n  reflections: number;\n  gamma: number;\n  workerPool?: WorkerPool;\n};\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      sceneName: 'random',\n      resolution: 20,\n      reflections: 8,\n      loading: true,\n      loaded: false,\n      gamma: 2.0,\n      workerPool: undefined,\n    }\n  }\n\n  componentDidMount() {\n    const nWorkers = 2;\n\n    const handshakes: Promise<Connection>[] = [];\n\n    for (let i = 0; i < nWorkers; ++i) {\n      const worker = new Worker(`${process.env.PUBLIC_URL}/ray-tracer/worker.js`);\n      let messenger = new WorkerMessenger({ worker });\n      // const log = debug(`post-me:parent${i}`);\n      // messenger = DebugMessenger(messenger, log);\n      handshakes.push(ParentHandshake(messenger, {}, 10, 1000));\n    }\n\n    Promise.all(handshakes).then((connections) => {\n      const workerPool = new WorkerPool(connections);\n      this.setState(state => {\n        return { ...state, workerPool, loading: false };\n      });\n    })\n  }\n\n  onStart = () => {\n    this.setState(state => {\n      return { ...state, loaded: true };\n    });\n  }\n\n  onStop = () => {\n    this.setState(state => {\n      return { ...state, loaded: false };\n    });\n  }\n\n  onParamChange = <K extends keyof State>(key: K, value: State[K]) => {\n    this.setState(state => {\n      return {\n        ...state,\n        [key]: value,\n      };\n    })\n  }\n\n  render() {\n    const { sceneName, resolution, reflections, gamma, workerPool, loaded, loading } = this.state;\n\n    return (\n      <div className=\"app\" style={{ backgroundColor: BACKGROUND }}>\n        <HeaderComponent />\n        <div className=\"content-container\">\n          {!loaded &&\n            <LoaderComponent\n              sceneName={sceneName}\n              resolution={resolution}\n              reflections={reflections}\n              gamma={gamma}\n              onParamChange={this.onParamChange}\n              onStart={this.onStart}\n              loading={loading}\n            />\n          }\n\n          {(loaded && workerPool) &&\n            <DisplayComponent\n              sceneName={sceneName}\n              workerPool={workerPool}\n              width={resolution * 16}\n              height={resolution * 9}\n              reflections={reflections}\n              gamma={gamma}\n              onStop={this.onStop}\n            />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}